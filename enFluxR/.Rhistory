months_in_query_params = as.character(seq.Date(from = start_date, to = end_date, by = '1 month'))
months_in_query_params
months_to_query = sum(check_table$ym %in% months_in_query_params)
months_to_query
months_in_query_params = data.table::data.table('ym' = as.character(seq.Date(from = start_date, to = end_date, by = '1 month')))
months_in_query_params
View(months_in_query_params)
data.table::data.table('ym' = as.character(seq.Date(from = start_date, to = end_date, by = '1 month'))) %>%
dplyr::filter(check_table$ym %in% ym)
months_in_query_params = data.table::data.table('ym' = as.character(seq.Date(from = start_date, to = end_date, by = '1 month')))
months_in_query_params
months_in_query = months_in_query_params %>%
dplyr::filter(!ym %in% check_table$ym)
months_in_query
months_in_query_params = data.table::data.table('ym' = as.character(seq.Date(from = start_date, to = end_date, by = '1 month')))
months_in_query = months_in_query_params %>%
dplyr::filter(!ym %in% check_table$ym) %>%
dplyr::pull(ym)
months_in_query
data_folder = tempdir()
.token = readRDS('~/GitHub/enFlux/.keys/.neon_token.RDS')
data_folder = tempdir()
for(i in months_in_query){
neonUtilities::zipsByProduct(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
# , token      = .token
)
}
i
purrr::possibly(
neonUtilities::zipsByProduct(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
# , token      = .token
)
)
for(i in months_in_query){
neonUtilities::
purrr::possibly(
neonUtilities::zipsByProduct(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
# , token      = .token
)
)
}
for(i in months_in_query){
purrr::possibly(
neonUtilities::zipsByProduct(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
# , token      = .token
)
)
}
purrr::possibly(
neonUtilities::zipsByProduct(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
# , token      = .token
), otherwise = 'Error'
)
purrr::possibly(
neonUtilities::zipsByProduct(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
# , token      = .token
), otherwise = 'Error' , quiet = TRUE
)
neonUtilities::
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = NULL)
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
data_folder = tempdir()
for(i in months_in_query){
neonUtilities::
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = NULL)
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
}
data_folder = tempdir()
for(i in months_in_query){
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = NULL)
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
}
end_date = ''
end_date = '2020-01-01'
con = enFluxR::connect_to_pg()
# Check to see if the data in the query already exists in the database
check_not_duping = glue::glue_sql(
"
select
date_trunc('month', time_end) as ym
, site
, count(*) as row_count
from dev_ecte
where mean is not null
group by site, ym
order by site, ym
", .con = con )
res = RPostgres::dbSendQuery(conn = con, statement = check_not_duping)
check_table = RPostgres::dbFetch(res) %>%
dplyr::mutate(ym = as.character(ym))
# Conver to dates
start_date = as.Date(start_date)
end_date   = as.Date(end_date)
# Filter query down to just months where we don't already have data
months_in_query_params = data.table::data.table('ym' = as.character(seq.Date(from = start_date, to = end_date, by = '1 month')))
months_in_query = months_in_query_params %>%
dplyr::filter(!ym %in% check_table$ym) %>%
dplyr::pull(ym)
months_in_query
.token = readRDS('~/GitHub/enFlux/.keys/.neon_token.RDS')
data_folder = tempdir()
for(i in months_in_query){
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = NULL)
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
}
start_date = '2017-01-01'
# Check to see if the data in the query already exists in the database
check_not_duping = glue::glue_sql(
"
select
date_trunc('month', time_end) as ym
, site
, count(*) as row_count
from dev_ecte
where mean is not null
group by site, ym
order by site, ym
", .con = con )
res = RPostgres::dbSendQuery(conn = con, statement = check_not_duping)
check_table = RPostgres::dbFetch(res) %>%
dplyr::mutate(ym = as.character(ym))
# Conver to dates
start_date = as.Date(start_date)
end_date   = as.Date(end_date)
# Filter query down to just months where we don't already have data
months_in_query_params = data.table::data.table('ym' = as.character(seq.Date(from = start_date, to = end_date, by = '1 month')))
months_in_query = months_in_query_params %>%
dplyr::filter(!ym %in% check_table$ym) %>%
dplyr::pull(ym)
months_in_query
.token = readRDS('~/GitHub/enFlux/.keys/.neon_token.RDS')
data_folder = tempdir()
for(i in months_in_query){
message(paste0('testing ', i))
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = NULL)
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
}
# Find the files that we downloaded
files_to_stack = list.files(data_folder, pattern = "filesToStack", full.names = TRUE)
files_to_stack
# Find the actual zip we need to unzip
files_to_unzip = list.files(files_to_stack, full.names = TRUE)
files_to_unzip
con = enFluxR::connect_to_pg()
# Check to see if the data in the query already exists in the database
check_not_duping = glue::glue_sql(
"
select
date_trunc('month', time_end) as ym
, site
, count(*) as row_count
from dev_ecte
where mean is not null
group by site, ym
order by site, ym
", .con = con )
res = RPostgres::dbSendQuery(conn = con, statement = check_not_duping)
check_table = RPostgres::dbFetch(res) %>%
dplyr::mutate(ym = as.character(ym))
# Conver to dates
start_date = as.Date(start_date)
end_date   = as.Date(end_date)
start_date = '2017-01-01'
site = 'PUUM',
end_date = '2020-01-01'
package = 'basic'
con = enFluxR::connect_to_pg()
# Check to see if the data in the query already exists in the database
check_not_duping = glue::glue_sql(
"
select
date_trunc('month', time_end) as ym
, site
, count(*) as row_count
from dev_ecte
where mean is not null
group by site, ym
order by site, ym
", .con = con )
res = RPostgres::dbSendQuery(conn = con, statement = check_not_duping)
check_table = RPostgres::dbFetch(res) %>%
dplyr::mutate(ym = as.character(ym))
# Conver to dates
start_date = as.Date(start_date)
end_date   = as.Date(end_date)
# Filter query down to just months where we don't already have data
months_in_query_params = data.table::data.table('ym' = as.character(seq.Date(from = start_date, to = end_date, by = '1 month')))
months_in_query = months_in_query_params %>%
dplyr::filter(!ym %in% check_table$ym) %>%
dplyr::pull(ym)
months_in_query
.token = readRDS('~/GitHub/enFlux/.keys/.neon_token.RDS')
data_folder = tempdir()
for(i in months_in_query){
message(paste0('testing ', i))
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = NULL)
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
}
# Find the files that we downloaded
files_to_stack = list.files(data_folder, pattern = "filesToStack", full.names = TRUE)
files_to_stack
# Find the actual zip we need to unzip
files_to_unzip = list.files(files_to_stack, full.names = TRUE)
files_to_unzip
con = enFluxR::connect_to_pg()
# Check to see if the data in the query already exists in the database
check_not_duping = glue::glue_sql(
"
select
date_trunc('month', time_end) as ym
, site
, count(*) as row_count
from dev_ecte
where mean is not null
group by site, ym
order by site, ym
", .con = con )
res = RPostgres::dbSendQuery(conn = con, statement = check_not_duping)
check_table = RPostgres::dbFetch(res) %>%
dplyr::mutate(ym = as.character(ym))
# Conver to dates
start_date = as.Date(start_date)
end_date   = as.Date(end_date)
# Filter query down to just months where we don't already have data
months_in_query_params = data.table::data.table('ym' = as.character(seq.Date(from = start_date, to = end_date, by = '1 month')))
months_in_query = months_in_query_params %>%
dplyr::filter(!ym %in% check_table$ym) %>%
dplyr::pull(ym)
.token = readRDS('~/GitHub/enFlux/.keys/.neon_token.RDS')
data_folder = tempdir()
library(magrittr)
con = enFluxR::connect_to_pg()
# Check to see if the data in the query already exists in the database
check_not_duping = glue::glue_sql(
"
select
date_trunc('month', time_end) as ym
, site
, count(*) as row_count
from dev_ecte
where mean is not null
group by site, ym
order by site, ym
", .con = con )
res = RPostgres::dbSendQuery(conn = con, statement = check_not_duping)
check_table = RPostgres::dbFetch(res) %>%
dplyr::mutate(ym = as.character(ym))
# Conver to dates
start_date = as.Date(start_date)
end_date   = as.Date(end_date)
# Filter query down to just months where we don't already have data
months_in_query_params = data.table::data.table('ym' = as.character(seq.Date(from = start_date, to = end_date, by = '1 month')))
months_in_query = months_in_query_params %>%
dplyr::filter(!ym %in% check_table$ym) %>%
dplyr::pull(ym)
.token = readRDS('~/GitHub/enFlux/.keys/.neon_token.RDS')
data_folder = tempdir()
for(i in months_in_query){
message(paste0('testing ', i))
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = NULL)
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
}
# Find the files that we downloaded
files_to_stack = list.files(data_folder, pattern = "filesToStack", full.names = TRUE)
# Find the actual zip we need to unzip
files_to_unzip = list.files(files_to_stack, full.names = TRUE)
files_to_stack
files_to_unzip
for(i in months_in_query){
message(paste0('testing ', i))
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = 'error')
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
}
for(i in months_in_query){
message(paste0('testing ', i))
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = 'error')
test = poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
message(test)
}
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
i
site
site = 'PUUM'
for(i in months_in_query){
message(paste0('testing ', i))
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = 'error')
test = poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
message(test)
}
site
i
i
package
data_folder
neonUtilities::zipsByProduct(      dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i
, package    = package
, savepath   = data_folder
, check.size = FALSE)
lubridate::month(1) + i
i
lubridate::month() + i
i_end =  lubridate::month(i + 1)
lubridate::month(i)
lubridate::months(1)
lubridate::month(1)
i %m+% lubridate::month(1)
library(lubridate)
i %m+% lubridate::month(1)
i %m+% months(1)
as.Date(i) %m+% months(1)
data_folder = tempdir()
for(i in months_in_query){
message(paste0('testing ', i))
i_end =  as.Date(i) %m+% months(1)
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = 'error')
test = poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i_end
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
message(test)
}
neonUtilities::zipsByProduct(      dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i_end
, package    = package
, savepath   = data_folder
, check.size = FALSE)
i_end
i
for(i in months_in_query){
message(paste0('testing ', i))
i_end =  as.character(as.Date(i) %m+% months(1))
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = 'error')
test = poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i_end
, package    = package
, savepath   = data_folder
, check.size = FALSE
)
message(test)
}
library(enFluxR)
download_ec(site = site, start_date = start_date, end_date = end_date, package = package)
download_ec(site = site, start_date = start_date, end_date = end_date, package = package)
library(enFluxR)
download_ec(site = site, start_date = start_date, end_date = end_date, package = package)
library(enFluxR)
months_in_query
check_table$ym
months_in_query
i
message(paste0('testing ', i))
i_end =  as.character(as.Date(i) %m+% months(1))
poss_ZBP = purrr::possibly(neonUtilities::zipsByProduct, otherwise = 'error')
base::suppressMessages(
poss_ZBP(
dpID         = 'DP4.00200.001'
, site       = site
, startdate  = i
, enddate    = i_end
, package    = package
, savepath   = data_folder
, check.size = FALSE
, token      = .token
)
)
?neonUtilities:::zipsByProduct
library(enFluxR)
download_ec(site = site, start_date = start_date, end_date = end_date, package = package)
download_ec(site = site, start_date = start_date, end_date = end_date, package = package)
